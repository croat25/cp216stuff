00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 3/20/2016 8:26:33 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Program    : q1
00000000                             3  * Written by : David Brown, Nora Znotinas
00000000                             4  * Date       : 2012-03-09; modified 2016-03-19
00000000                             5  * Modified by:bruno salapic
00000000                             6  * Date       :
00000000                             7  * Description: Writes a red rectangle to the screen buffer.
00000000                             8  *-----------------------------------------------------------
00000000                             9              
00000000                            10              
00000000                            11              
00000400                            12  START       ORG     $400
00000400                            13  
00000400                            14  *===========================================================
00000400                            15  
00000400  23FC 00000032 008CA59E    16              move.l  #50,rectangle           ; move x
0000040A  23FC 000000A0 008CA5A2    17              move.l  #160,rectangle+4        ;move y 
00000414  23FC 00000064 008CA5A6    18              move.l  #100,rectangle+8        ; move width
0000041E  23FC 0000012C 008CA5AA    19              move.l  #300,rectangle+12       ; move height
00000428  4879 008CA59E             20              pea     rectangle
0000042E  23FC 00000258 000004D4    21              move.l  #600,sb                 ;
00000438  23FC 00000190 000004D8    22              move.l  #400,sb+4               ;screen buffer size
00000442                            23  
00000442                            24  *===========================================================
00000442                            25              
00000442                            26  * Display the screen buffer.
00000442  4879 000004D4             27              PEA     SB
00000448  4EB9 008CA54A             28              JSR     RED_RECTANGLE
0000044E  508F                      29              ADDA.L  #8,SP
00000450                            30              
00000450  23FC 000000FA 008CA59E    31              move.l  #250,rectangle          ; move x
0000045A  23FC 0000012C 008CA5A2    32              move.l  #300,rectangle+4        ;move y 
00000464  23FC 0000015E 008CA5A6    33              move.l  #350,rectangle+8        ; move width
0000046E  23FC 00000014 008CA5AA    34              move.l  #20,rectangle+12        ; move height
00000478                            35              
00000478  4879 008CA59E             36              pea     rectangle
0000047E                            37              
0000047E  23FC 00000258 000004D4    38              move.l  #600,sb
00000488  23FC 00000190 000004D8    39              move.l  #400,sb+4
00000492  4879 000004D4             40              pea     sb
00000498  4EB9 008CA54A             41              jsr     RED_RECTANGLE
0000049E  4EB9 008CA506             42              jsr     sb_dsp
000004A4  508F                      43              adda.l  #8,sp
000004A6                            44              
000004A6                            45  
000004A6  4E72 2700                 46              STOP    #$2700
000004AA                            47  
000004AA                            48  *-----------------------------------------------------------
000004AA                            49  * Includes
000004AA                            50              INCLUDE 'graphic_util.X68'
000004AA  48E7 8000                 51  G_COLOR     MOVEM.L D0,-(SP)
000004AE                            52  
000004AE  7050                      53              MOVEQ.L #80,D0
000004B0  4E4F                      54              TRAP    #15
000004B2                            55  
000004B2  4CDF 0001                 56              MOVEM.L (SP)+,D0
000004B6  4E75                      57              RTS
000004B8                            58  
000004B8  48E7 8000                 59  G_PIXEL     MOVEM.L D0,-(SP)
000004BC                            60  
000004BC  7052                      61              MOVEQ.L #82,D0
000004BE  4E4F                      62              TRAP    #15
000004C0                            63  
000004C0  4CDF 0001                 64              MOVEM.L (SP)+,D0
000004C4  4E75                      65              RTS
000004C6                            66  
000004C6  48E7 8000                 67  G_SIZE      MOVEM.L D0,-(SP)
000004CA                            68  
000004CA  7021                      69              MOVEQ.L #33,D0
000004CC  4E4F                      70              TRAP    #15
000004CE                            71  
000004CE  4CDF 0001                 72              MOVEM.L (SP)+,D0
000004D2  4E75                      73              RTS
000004D4                            74  
000004D4                            75  
000004D4                            76  -------------------- end include --------------------
000004D4                            77              INCLUDE 'buffer_util2.X68'
000004D4  =00000780                 78  SB_W_MAX    EQU     1920                    * Maximum width of the screen buffer.
000004D4  =000004B0                 79  SB_H_MAX    EQU     1200                    * Maximum height of the screen buffer.
000004D4  =00232800                 80  SB_S_MAX    EQU     SB_W_MAX*SB_H_MAX       * Maximum screen buffer size in pixels. 
000004D4                            81  
000004D4                            82  
000004D4                            83  
000004D4                            84  SB          DS.L    1                       * Screen Width in pixels.
000004D8                            85              DS.L    1                       * Screen Height in pixels.
000004DC                            86              DS.L    SB_S_MAX                * Screen buffer declared at maximum size.
008CA4DC  =008CA4DC                 87  SB_E        EQU     *                       * Screen buffer end address.
008CA4DC                            88              
008CA4DC                            89  
008CA4DC                            90  
008CA4DC  4E56 0000                 91  SB_CLR      LINK    A6,#0
008CA4E0  48E7 70C0                 92              MOVEM.L D1-D3/A0-A1,-(SP)
008CA4E4                            93  
008CA4E4  226E 0008                 94              MOVE.L  8(A6),A1                * Set the screen buffer structure address.
008CA4E8  222E 000C                 95              MOVE.L  12(A6),D1               * Set the colour value.
008CA4EC  2411                      96              MOVE.L  (A1),D2                 * Set the screen buffer width.
008CA4EE  2629 0004                 97              MOVE.L  4(A1),D3                * Set the screen buffer height.
008CA4F2  C4C3                      98              MULU    D3,D2                   * Calculate size of actual screen buffer.
008CA4F4  41E9 0008                 99              LEA     8(A1),A0                * Set the address for the screen buffer image data.
008CA4F8                           100  
008CA4F8  20C1                     101  P_LOOP      MOVE.L  D1,(A0)+                * Set the pixel colour.
008CA4FA  5382                     102              SUBQ.L  #1,D2                   * Decrement the pixel count.
008CA4FC  6EFA                     103              BGT     P_LOOP                  * Pixels left?
008CA4FE                           104              
008CA4FE  4CDF 030E                105              MOVEM.L (SP)+,D1-D3/A0-A1
008CA502  4E5E                     106              UNLK    A6
008CA504  4E75                     107              RTS
008CA506                           108  
008CA506                           109  
008CA506                           110  
008CA506  4E56 0000                111  SB_DSP      LINK    A6,#0
008CA50A  48E7 F0C0                112              MOVEM.L D0-D3/A0-A1,-(SP)
008CA50E                           113  
008CA50E  226E 0008                114              MOVE.L  8(A6),A1                * Set the screen buffer structure address.
008CA512  2211                     115              MOVE.L  (A1),D1                 * Set buffer width in low word of D1.
008CA514  4841                     116              SWAP    D1                      * Move buffer height to high word of D1.
008CA516  D2A9 0004                117              ADD.L   4(A1),D1                * Set buffer height in low word of D1.
008CA51A  4EB8 04C6                118              JSR     G_SIZE                  * Set size of screen to match buffer size. (graphic_util.X68)
008CA51E                           119  
008CA51E  41E9 0008                120              LEA     8(A1),A0                * Set the screen buffer data address.
008CA522                           121  
008CA522  4282                     122              CLR.L   D2                      * Initialize Y position.
008CA524                           123  
008CA524  4281                     124  Y_LOOP      CLR.L   D1                      * Initialize X position.
008CA526                           125  
008CA526  C343                     126  X_LOOP      EXG     D1,D3                   * Preserve X position.
008CA528                           127  
008CA528                           128              * Set the output color - color stored in long word of screen buffer
008CA528                           129              * in $00BBGGRR format. (Defined by EASy68K Simulator graphics tasks.)
008CA528  7050                     130              MOVEQ.L #80,D0                  * Set color task number.
008CA52A  2218                     131              MOVE.L  (A0)+,D1                * Copy pixel color value to D1.
008CA52C  4E4F                     132              TRAP    #15                     * Set the pen color.
008CA52E  C343                     133              EXG     D1,D3                   * Return X position.
008CA530                           134  
008CA530  7052                     135              MOVEQ.L #82,D0                  * Set draw pixel task number.
008CA532  4E4F                     136              TRAP    #15                     * Draw the pixel at X,Y.
008CA534                           137              
008CA534  5281                     138              ADDQ.L  #1,D1                   * Increment X.
008CA536  B291                     139              CMP.L   (A1),D1                 * End of row?
008CA538  6DEC                     140              BLT     X_LOOP                  *   No - move to next column.
008CA53A                           141  
008CA53A  5282                     142              ADDQ.L  #1,D2                   * Increment Y.
008CA53C  B4A9 0004                143              CMP.L   4(A1),D2                * End of image?
008CA540  6DE2                     144              BLT     Y_LOOP                  *   No - move to next row.
008CA542                           145              
008CA542  4CDF 030F                146              MOVEM.L (SP)+,D0-D3/A0-A1
008CA546  4E5E                     147              UNLK    A6
008CA548  4E75                     148              RTS
008CA54A                           149  
008CA54A                           150  
008CA54A                           151  
008CA54A                           152  
008CA54A                           153  
008CA54A                           154  
008CA54A                           155  -------------------- end include --------------------
008CA54A                           156  RED_RECTANGLE
008CA54A                           157              INCBIN 'red_rectangle.bin'
008CA59E                           158  
008CA59E                           159              
008CA59E                           160  *-----------------------------------------------------------
008CA59E                           161  * DATA AREA
008CA59E                           162  *
008CA59E                           163  * Rectangle structure definition.
008CA59E                           164  *
008CA59E                           165  * Equivalent C Definition: 
008CA59E                           166  * typedef struct rectangleType {
008CA59E                           167  *    int32 x;
008CA59E                           168  *    int32 y;
008CA59E                           169  *    int32 width;
008CA59E                           170  *    int32 height;
008CA59E                           171  * } rectangleType;
008CA59E                           172  
008CA59E                           173  RECTANGLE   DS.L    1                       * x
008CA5A2                           174              DS.L    1                       * y
008CA5A6                           175              DS.L    1                       * width
008CA5AA                           176              DS.L    1                       * height
008CA5AE                           177  
008CA5AE                           178  
008CA5AE                           179              END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
G_COLOR             4AA
G_PIXEL             4B8
G_SIZE              4C6
P_LOOP              8CA4F8
RECTANGLE           8CA59E
RED_RECTANGLE       8CA54A
SB                  4D4
SB_CLR              8CA4DC
SB_DSP              8CA506
SB_E                8CA4DC
SB_H_MAX            4B0
SB_S_MAX            232800
SB_W_MAX            780
START               400
X_LOOP              8CA526
Y_LOOP              8CA524
